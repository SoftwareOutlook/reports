\documentclass[12pt, a4paper]{article}
\setlength{\textheight}{24cm}
\setlength{\textwidth}{16cm}
\setlength{\topmargin}{0cm}
\setlength{\evensidemargin}{0cm}
\setlength{\oddsidemargin}{0cm}
\usepackage[affil-it]{authblk}
\usepackage{graphics}
\usepackage{graphicx}
\usepackage{caption}
\usepackage{float}
\usepackage[british]{babel}
\usepackage{hyperref}
\usepackage{subcaption}
\date{}
\begin{document}
\title{Comparison of several frameworks for general-purpose programming and the  computation of FFTs on GPUs in C}
\author{Philippe Gambron \thanks{\texttt{philippe.gambron{@}stfc.ac.uk}}}
\affil{Science and Technology Facilities Council, Hartree Centre, Rutherford Appleton Laboratory, Harwell Campus, Harwell Oxford, OX11 0QZ, United Kingdom}
\maketitle
\begin{abstract}
We compare the performance of several frameworks that can be used, in C, for general-purpose programming on a graphical processing unit (GPU) or to compute Fast Fourier Transforms (FFTs).  
\end{abstract}
\section{Introduction}
For a bit more than a decade, the use of GPU has become increasingly widespread. They are indeed capable of significantly increasing the performance of a single workstation or compute node. While there are some overheads associated to the t data transfers between the memory and the GPU and the launch of the kernel and some constraints on the types of algorithms can be efficiently programmed, one can obtain tremendous performance gains on suitable problems.\\

In this report, we will compare the performance of several of these frameworks that we measured for a simple general-purpose programming example and for computing FFTs on the GPU by using the libraries provided by these frameworks. 

\section{Overview of the chosen libraries}
We consider the following frameworks for GPU programming: CUDA \cite{cuda}, OpenCL \cite{opencl}, OpenMP \cite{OpenMP}\footnote{From version 4.0, OpenMP offers GPU programming} and Kokkos \cite{kokkos}. The first three of these frameworks provide as well FFT libraries. Respectively, they are: cuFFT \cite{cufft}, clFFT \cite{clfft} and AccFFT \cite{accfft}.

(Table \ref{ffttable}). They can perform complex transforms, real-to-half-complex ones (and conversely) as well as, in the case of FFTW, real-to-real transforms when the signal is odd or even. The half-complex output consists in half as many complex values as there were points in the signal, taking advantage of the hermiticity of the Fourier transform of a real function.\\

The GSL and FFTPACK libraries only work in one dimension\footnote{FFTPACK can compute FFTs in several dimensions but it is written in FORTRAN and all the C or C++ wrappers we have found only allowed one-dimensional transforms.}. On the contrary, FFTW and MKL can compute FFTs in several dimensions. They are also capable of working in a parallel way, using multithreading and MPI. The purpose of this work is to assess their performance on a single node. As a consequence, we will only study the effect of multihtreading. 
\begin{table}[H]
\captionsetup{width=1\textwidth}
\begin{tabular}{|p{2.5cm}||p{2.5cm}|p{1cm}|p{3cm}|p{3cm}|p{2cm}|p{2cm}|}
\hline
& Type & Dim. & Radices & Licence \\
\hline
\hline
AccFFT & R$\to$H,\ \ \  C$\to$C& 3& & GPL v2\\
\hline
clFFT  &  R$\to$H,\ \ \  C$\to$C,\ \ \ \  H$\to$R& 1, 2, 3 & 2, 3, 5, 7 & Proprietary\\
\hline
cuFFT  &  R$\to$H,\ \ \  C$\to$C,\ \ \ \  H$\to$R & 1, 2, 3 & 2, 3, 5, 7 & GPL v3\\
\hline
\end{tabular}
\caption{Overview of the FFT libraries considered. R stands for real, C, for complex, and HC, for half-complex.}
\label{ffttable}
\end{table}
\section{Benchmark}
The benchmark \cite{code} consists in calculating the FFT of a series of volumes, in 1, 2 or 3 dimensions, of real or complex values. The purpose was to mimick a problem submitted to us by the CCP PET-MR collaboration \cite{ccppetmr}, within the Software Outlook initiative \cite{softwareoutlook}, who needed to take the transform of series of square complex images. This example is depicted in Fig. \ref{benchmark}. For our more general test, the 2-dimensional slices could be replaced by a line or a rectangular cuboid. We used 32 images, which was a typical value used by that collaboration, for the tests that were representative of their requirement. For the other runs, we always processed a single image.\\

We used a number of points varying from $\sim 10^3$ to $\sim 10^7$. The domains had sides of equal lengths (square or cubic) or were flattened (rectangle or cuboid). These dimensions could be powers of 2, products of powers of small integers (2, 3, 5 and 7) or prime numbers. We used a single thread in all cases except when we assessed the effect of multithreading. In that case, the number of threads was increased till 24.\\

The values appearing in the graphs are the execution time averaged over 10 runs. A certain number of bumps or slight unexpected features are apparent. However they were consistently repeated in all our measurements. This is also confirmed by the standard deviation of our results which was always quite small, of the order of a few percents of the average value. We chose not to display error bars on our graphs since they were so small that they were barely visible. 

\begin{figure}[H]
\captionsetup{width=0.6\textwidth}
\centering
\includegraphics[height=5cm]{benchmark.pdf}
\caption{The benchmark consists in taking the FFT of several images. Each of them is made of real or complex values and can be a simple line, a rectangle or a cuboid.}
\label{benchmark}
\end{figure}

\section{Set up}
Our measurements were carried out on Archer \cite{archer}. The modules \texttt{gcc/7.2.0} and \\ \texttt{intel/17.0.3.191} were loaded. In order to take advantage of multi-threading, the environment variable \texttt{KMP\_AFFINITY} must be set to \texttt{disabled}. We used our own version of Boost, FFTW and GSL because the version of Boost present on the system was lacking certain libraries and we wanted to use the most recent versions of FFTW and GSL.\\

Our benchmark was done in C++ using doubles. More precisely, we used version 3.3.8 of FFTW, version 17.0.3 of MKL and version 2.5 of GSL. The benchmark was compiled with the flags \texttt{-std=c++1z -O3  -fopenmp   -lm -lfftw3 -lfftw3\_threads -lgslcblas -lgsl -lboost\_system -lboost\_chrono -liomp5 -lmkl\_core -lmkl\_intel\_thread \\-lmkl\_intel\_lp64  -lcasa\_scimath  -llapack}.\\

Since FFTPACK was written in FORTRAN, we have resorted to the C++ wrapper provided by CASA, the radioastronomy package \cite{casa}. This is straightforward on Debian-like systems, as the one used by CCP PET-MR in their virtual environment, where CASA can be installed using the package manager. However, including the headers and linking with the libraries is not possible neither supported with the version of CASA distributed by the National Radio Astronomy Observatory. As a consequence, this was quite difficult to set up on Archer and required to use the libraries provided by an old version of Debian, to match those available on the system.

\pagebreak
\section{Performance}

We first compare the performance of each library, in one dimension (Section \ref{1D}), for numbers of points consisting of powers of 2, products of powers of small integers and prime numbers. We do so for real and complex values and with FFTW (Fig. \ref{1DFFTWR} and \ref{1DFFTWC}), MKL (Fig. \ref{1DMKLR} and \ref{1DMKLC}), GSL (Fig. \ref{1DGSLR} and \ref{1DGSLC}) and FFTPACK (Fig. \ref{1DFFTPACKR} and \ref{1DFFTPACKC}). We then compare the different libraries for powers of 2 (Fig. \ref{1DPOW2R} and \ref{1DPOW2C}) and in general (Fig. \ref{1DR} and \ref{1DC}).\\

Finally we repeat those measurements in more dimensions (Sections \ref{2DS} and \ref{3DS}), with a domain that is a square or a cube, but only FFTW and MKL work in these situations (Fig. \ref{2DFFTWR} - \ref{3DC}).\\

As expected, for all the libraries, the performance is worse with primes than with powers of 2 or products of powers of small integers. According to our measurements, the MKL library tends to be the fastest. We also notice that the performance with primes is significantly worse, with real numbers, in the cases of GSL and FFTPACK.
\subsection{1 dimension}\label{1DS}
\subsubsection{FFTW}
\begin{figure}[H]
\captionsetup{width=0.8\linewidth}
\centering
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/1d-fftw-r.pdf}
\caption{Real}
\label{1DFFTWR}
\end{subfigure}%
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/1d-fftw-c.pdf}
\caption{Complex}
\label{1DFFTWC}
\end{subfigure}
\caption{Execution time as a function of the number of points\\(1 dimension, FFTW, 1 thread)}
\label{1DFFTW}
\end{figure}


\subsubsection{MKL}
\begin{figure}[H]
\captionsetup{width=0.8\linewidth}
\centering
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/1d-mkl-r.pdf}
\caption{Real}
\label{1DMKLR}
\end{subfigure}%
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/1d-mkl-c.pdf}
\caption{Complex}
\label{1DMKLC}
\end{subfigure}
\caption{Execution time as a function of the number of points\\(1 dimension, MKL, 1 thread)}
\label{1DMKL}
\end{figure}




\subsubsection{GSL}
\begin{figure}[H]
\captionsetup{width=0.8\linewidth}
\centering
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/1d-gsl-r.pdf}
\caption{Real}
\label{1DGSLR}
\end{subfigure}%
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/1d-gsl-c.pdf}
\caption{Complex}
\label{1DGSLC}
\end{subfigure}
\caption{Execution time as a function of the number of points\\(1 dimension, GSL, 1 thread)}
\label{1DGSL}
\end{figure}



\subsubsection{FFTPACK}
\begin{figure}[H]
\captionsetup{width=0.8\linewidth}
\centering
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/1d-fftpack-r.pdf}
\caption{Real}
\label{1DFFTPACKR}
\end{subfigure}%
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/1d-fftpack-c.pdf}
\caption{Complex}
\label{1DFFTPACKC}
\end{subfigure}
\caption{Execution time as a function of the number of points\\(1 dimension, FFTPACK, 1 thread)}
\label{1DFFTPACK}
\end{figure}

\subsubsection{All the libraries - powers of 2}
\begin{figure}[H]
\captionsetup{width=0.8\linewidth}
\centering
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/1d-pow2-r.pdf}
\caption{Real}
\label{1DPOW2R}
\end{subfigure}%
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/1d-pow2-c.pdf}
\caption{Complex}
\label{1DPOW2C}
\end{subfigure}
\caption{Execution time as a function of the number of points\\(1 dimension, powers of 2, 1 thread)}
\label{1DPOW2}
\end{figure}

\subsubsection{All the libraries}
\begin{figure}[H]
\captionsetup{width=0.8\linewidth}
\centering
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/1d-r.pdf}
\caption{Real}
\label{1DR}
\end{subfigure}%
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/1d-c.pdf}
\caption{Complex}
\label{1DC}
\end{subfigure}
\caption{Execution time as a function of the number of points\\(1 dimension, 1 thread)}
\label{1D}
\end{figure}

\subsection{2 dimensions}\label{2DS}
\subsubsection{FFTW}
\begin{figure}[H]
\captionsetup{width=0.8\linewidth}
\centering
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/2d-fftw-r.pdf}
\caption{Real}
\label{2DFFTWR}
\end{subfigure}%
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/2d-fftw-c.pdf}
\caption{Complex}
\label{2DFFTWC}
\end{subfigure}
\caption{Execution time as a function of square side\\(2 dimensions, FFTW, 1 thread)}
\label{2DFFTW}
\end{figure}

\subsubsection{MKL}
\begin{figure}[H]
\captionsetup{width=0.8\linewidth}
\centering
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/2d-mkl-r.pdf}
\caption{Real}
\label{2DMKLR}
\end{subfigure}%
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/2d-mkl-c.pdf}
\caption{Complex}
\label{2DMKLC}
\end{subfigure}
\caption{Execution time as a function of square side\\(2 dimensions, MKL, 1 thread)}
\label{2DMKL}
\end{figure}

\subsubsection{All the libraries - powers of 2}
\begin{figure}[H]
\captionsetup{width=0.8\linewidth}
\centering
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/2d-pow2-r.pdf}
\caption{Real}
\label{2DPOW2R}
\end{subfigure}%
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/2d-pow2-c.pdf}
\caption{Complex}
\label{2DPOW2C}
\end{subfigure}
\caption{Execution time as a function of square side\\(2 dimensions, powers of 2, 1 thread)}
\label{2DPOW2}
\end{figure}

\subsubsection{All the libraries}
\begin{figure}[H]
\captionsetup{width=0.8\linewidth}
\centering
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/2d-r.pdf}
\caption{Real}
\label{2DR}
\end{subfigure}%
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/2d-c.pdf}
\caption{Complex}
\label{2DC}
\end{subfigure}
\caption{Execution time as a function of square side\\(2 dimensions, 1 thread)}
\label{2D}
\end{figure}

\subsection{3 dimensions}\label{3DS}
\subsubsection{FFTW}
\begin{figure}[H]
\captionsetup{width=0.8\linewidth}
\centering
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/3d-fftw-r.pdf}
\caption{Real}
\label{3DFFTWR}
\end{subfigure}%
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/3d-fftw-c.pdf}
\caption{Complex}
\label{3DFFTWC}
\end{subfigure}
\caption{Execution time as a function of cube side\\(3 dimensions, FFTW, 1 thread)}
\label{3DFFTW}
\end{figure}

\subsubsection{MKL}
\begin{figure}[H]
\captionsetup{width=0.8\linewidth}
\centering
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/3d-mkl-r.pdf}
\caption{Real}
\label{3DMKLR}
\end{subfigure}%
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/3d-mkl-c.pdf}
\caption{Complex}
\label{3DMKLC}
\end{subfigure}
\caption{Execution time as a function of cube side\\(3 dimensions, MKL, 1 thread)}
\label{3DMKL}
\end{figure}

\subsubsection{All the libraries - powers of 2}
\begin{figure}[H]
\captionsetup{width=0.8\linewidth}
\centering
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/3d-pow2-r.pdf}
\caption{Real}
\label{3DPOW2R}
\end{subfigure}%
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/3d-pow2-c.pdf}
\caption{Complex}
\label{3DPOW2C}
\end{subfigure}
\caption{Execution time as a function of cube side\\(3 dimensions, powers of 2, 1 thread)}
\label{3DPOW2}
\end{figure}

\subsubsection{All the libraries}
\begin{figure}[H]
\captionsetup{width=0.8\linewidth}
\centering
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/3d-r.pdf}
\caption{Real}
\label{3DR}
\end{subfigure}%
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/3d-c.pdf}
\caption{Complex}
\label{3DC}
\end{subfigure}
\caption{Execution time as a function of cube side\\(3 dimensions, 1 thread)}
\label{2D}
\end{figure}

\subsection{Flatness}

These experiments were carried out with domains whose dimensions were the same in all directions, that is, squares or cubes. We have observed that there is no clear trend in the way the flatness of the domain affects the performance. Fig. \ref{FLATNESS} shows the performance obtained, in 3 dimensions, for a cuboid containing $512^3$ points whose sides in the $y$ and $z$ directions have identical lengths. We hade defined the flatness as the ratio between the number of points in the $y$ and $x$ directions ($N_y/N_x,\ N_y=N_z$). We varied the proportions of the volume from $512:512:512$ till $2^{24}:2:2$.  \\

\begin{figure}[H]
\captionsetup{width=0.8\linewidth}
\centering
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/3d-flatness-pow2-r.pdf}
\caption{Real}
\label{FLATNESSR}
\end{subfigure}%
\begin{subfigure}{.5\textwidth}
\centering
\includegraphics[width=.9\linewidth]{graphs/performance/3d-flatness-pow2-c.pdf}
\caption{Complex}
\label{FLATNESSC}
\end{subfigure}
\caption{Execution time as a function of the flatness of the domain ($N_y/N_x$), for $N_y=N_z$ (3 dimensions, powers of 2, 1 thread)}
\label{FLATNESS}
\end{figure}


\section{Requirements from the CCP}
We have also benchmarked the FFT libraries in a situation corresponding to a problem encountered by the CCP/PET-MR collaboration, by computing the transform of a series of 32 square complex images whose side consists of 256 points as well as the closest prime number (257) and product of powers of small integers ($2^23^27=252$). As in the other cases, the MKL library performs better than FFTW. None of the other libraries we have considered could be used in this situation. GSL works only in one dimension. The FORTRAN version of FFTPACK does not share that limitation. However all the C/C++ wrappers we have found offer only one-dimensional transforms. Finally FFTPACK is distributed with a licence that is less constraining than the GPL but, nevertheless, the C++ wrapper provided by CASA that we have used is distributed under the GPL v2.

\begin{figure}[H]
\captionsetup{width=0.6\textwidth}
\centering
\includegraphics[height=8cm]{graphs/ccp/ccp.pdf}
\caption{Execution time for the transform of 32 complex square images as a function of square side\\(2 dimensions, complex, 1 thread)}
\label{method}
\end{figure}

\section{Acknowledgements}
This work was funded by under grant .
\begin{thebibliography}{9}

\bibitem{fftw}
Frigo, Matteo and Johnson, Steven G.,
{\it The Design and Implementation of FFTW3},
Proceedings of the IEEE,
2005,
93,
2,
216--231,
Special issue on ``Program Generation, Optimization, and Platform Adaptation''
\bibitem{cuda}
\hyperlink{https://developer.nvidia.com/cuda-zone}{https://developer.nvidia.com/cuda-zone}

\bibitem{opencl}
\hyperlink{https://www.khronos.org/opencl/}{https://www.khronos.org/opencl/}
  
\bibitem{fftpack}
\hyperlink{https://www.khronos.org/opencl/}{https://www.khronos.org/opencl/}

\bibitem{openacc}
\hyperlink{https://www.openmp.org/}{https://www.openmp.org/}

\bibitem{cufft}
\hyperlink{https://docs.nvidia.com/cuda/cufft/index.html}{https://docs.nvidia.com/cuda/cufft/index.html}

\bibitem{clfft}
  \hyperlink{https://github.com/clMathLibraries/clFFT}{https://github.com/clMathLibraries/clFFT}
  
\bibitem{accfft}
\hyperlink{http://accfft.org/}{http://accfft.org/}

\bibitem{casa}
McMullin, J. P., Waters, B., Schiebel, D., Young, W., Golap, K.,
{\it Astronomical Data Analysis Software and Systems XVI},
ASP Conf. Ser. 376, ed. R. A. Shaw, F. Hill, D. J. Bell (San Francisco, CA: ASP), 127

\bibitem{code}
\hyperlink{git@github.com:SoftwareOutlook/FFTC.git}{git@github.com:SoftwareOutlook/FFTC.git}
    
\bibitem{ccppetmr}
\hyperlink{https://www.ccppetmr.ac.uk/}{https://www.ccppetmr.ac.uk/}

\bibitem{softwareoutlook}
\hyperlink{https://www.softwareoutlook.ac.uk/}{https://www.softwareoutlook.ac.uk/}

\bibitem{archer}
\hyperlink{https://www.archer.ac.uk/}{https://www.archer.ac.uk/}
  
\end{thebibliography}

\end{document}
